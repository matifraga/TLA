package Raptor;

import java_cup.runtime.*;
import java.io.PrintWriter;

parser code {:

    private static PrintWriter writer = null;

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new Parser(new Scanner(System.in,sf),sf).parse();
		else {
		    String fileName = args[0].split("\\.")[0];
		    writer = new PrintWriter(fileName + ".java", "UTF-8");
		    writeToFile("import java.util.Scanner;");
		    writeToFile("public class " + fileName +" {\n");
		    writeToFile("private static Scanner scanner = new Scanner(System.in);");
		    new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
		}
	}
	
	public static void writeToFile(String s) {
	    writer.print(s);
	}
	
	public static void closeWriter() {
	    writeToFile("}");
	    writer.close();
	}
	
:}

terminal PLUS, TIMES, MINUS, DIVIDE, ASSIGN, MOD, LPAREN, RPAREN, JUMP, BEGIN, FINISH, AS_PLUS, AS_MINUS, AS_TIMES, AS_DIV, IO_OUT, IO_IN, IF, ELSE, LOOP, END, CMP_LT, CMP_GT, CMP_EQ, CMP_NE, BOOL_OR, BOOL_AND, BOOL_NOT, TRUE, FALSE;
terminal String  NUM_DEF, TEXT, NUM_VAR, TEXT_VAR, TEXT_DEF, NUM_CONST_DEF, TEXT_CONST_DEF, NUM_CONST, TEXT_CONST;
terminal Integer NUMBER;

non terminal s;
non terminal String codee, code_line, var, text_expr, if_block, boolean_exp, boolean_term;
non terminal Object num_expr;

precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left MOD;

s               ::= BEGIN JUMP codee:e FINISH 
                    {: 
                       parser.writeToFile("public static void main(String args[]) { \n");
                       parser.writeToFile(e);
                       parser.writeToFile("}\n");
                       parser.closeWriter(); 
                    :}
                ;
                    
codee           ::= codee:a code_line:e JUMP 
                    {: RESULT= a + e + ";\n"; :}
                |   code_line:e JUMP
                    {: RESULT= e + ";\n"; :}
                ;
                
code_line       ::= num_expr:e 
                    {: RESULT=String.valueOf(e); :}
                |   var:e
                    {: RESULT=e; :}
                |   IO_OUT LPAREN text_expr:e RPAREN
                    {: RESULT= "System.out.print(" + e + ")"; :}
                |   IO_OUT LPAREN num_expr:e RPAREN
                    {: RESULT= "System.out.print(" + e + ")"; :}
                |   IO_IN LPAREN NUM_VAR:e RPAREN
                    {: RESULT= e + " = Integer.valueOf(scanner.nextLine())"; :}
                |   IO_IN LPAREN TEXT_VAR:e RPAREN
                    {: RESULT= e + " = scanner.nextLine()"; :}
                |   if_block:e
                    {: RESULT=e ;:}
                |   LOOP boolean_exp:d JUMP codee:e END
                    {: RESULT="while(" + d + "){\n" + e + "}"; :}
                |
                ;
                
if_block        ::= IF boolean_exp:b JUMP codee:e ELSE JUMP codee:j END
                    {: RESULT= "if (" + b + ") {\n" + e + "} else {\n" + j + "}"; :}
                |   IF boolean_exp:b JUMP codee:e END
                    {: RESULT= "if (" + b + ") {\n" + e + "}" ; :}
                ;
                
boolean_exp     ::= LPAREN boolean_exp:a RPAREN
                    {: RESULT= "(" + a + ")";:}
                |   boolean_term:s BOOL_OR boolean_exp:q
                    {: RESULT= "(" + s + " || " + q + ")" ;:}
                |   boolean_term:s BOOL_AND boolean_exp:t
                    {: RESULT= "(" + s + " && " + t + ")" ;:}
                |   boolean_term:h
                    {: RESULT= h ; :}
                |   BOOL_NOT boolean_exp:g
                    {: RESULT= "!" + g ;:} 
                ;
                
boolean_term    ::= TRUE
                    {: RESULT= "true" ;:}
                |   FALSE
                    {: RESULT= "false" ;:}
                |   LPAREN num_expr:a CMP_LT num_expr:t RPAREN
                    {: RESULT= "(" + a + " < " + t + ")" ;:}
                |   LPAREN num_expr:a CMP_GT num_expr:t RPAREN
                    {: RESULT= "(" + a + " > " + t + ")" ;:}
                |   LPAREN num_expr:a CMP_EQ num_expr:t RPAREN
                    {: RESULT= "(" + a + ".equals(" + t + "))" ;:}
                |   LPAREN num_expr:a CMP_NE num_expr:t RPAREN
                    {: RESULT= "(" + a + " != " + t + ")" ;:}
                ;
                 
var             ::= NUM_DEF:e
                    {: RESULT="Integer " + e + " = 0"; :}
                |   NUM_DEF:e ASSIGN num_expr:a
                    {: RESULT="Integer " + e + " = " + a ; :}
                |   TEXT_DEF:e
                    {: RESULT="String " + e + " = \"\""; :}
                |   TEXT_DEF:e ASSIGN text_expr:a
                    {: RESULT="String " + e + " = " + a ; :}
                |   TEXT_VAR:a AS_PLUS text_expr:e
                    {: RESULT= a + " = " + a + ".concat(" + e + ")"; :}
                |   NUM_VAR:a AS_PLUS num_expr:e
                    {: RESULT= a + " = " + a + " + " + e; :}
                |   NUM_VAR:a AS_MINUS num_expr:e
                    {: RESULT= a + " = " + a + " - " + e; :}
                |   NUM_VAR:a AS_TIMES num_expr:e
                    {: RESULT= a + " = " + a + " * " + e; :}
                |   NUM_VAR:a AS_DIV num_expr:e
                    {: RESULT= a + " = " + a + " / " + e; :}
                |   NUM_CONST_DEF:a ASSIGN num_expr:e
                    {: RESULT= "final Integer " + a + " = " + e ;:}
                |   TEXT_CONST_DEF:a ASSIGN text_expr:e
                    {: RESULT= "final String " + a + " = " + e ;:}
                |   TEXT_VAR:v ASSIGN text_expr:j
                    {: RESULT= v + " = " + j ; :}
                |   NUM_VAR:v ASSIGN num_expr:j
                    {: RESULT= v + " = " + j ; :}
                ;
                
text_expr       ::= TEXT:e
                    {: RESULT=e; :}
                |   text_expr:a PLUS text_expr:r
                    {: RESULT= a + " + " + r ; :}
                |   TEXT_VAR:g
                    {: RESULT=g; :}
                |   TEXT_CONST:g
                    {: RESULT=g; :}
                ;
                
num_expr        ::= NUMBER:n  
                    {: RESULT=n; :}
                | num_expr:l PLUS num_expr:r
                    {: RESULT = (l instanceof String || r instanceof String) ? (l + " + " + r) : new Integer(((Integer)l).intValue() + ((Integer)r).intValue()); :}
                | num_expr:l MINUS num_expr:r
                    {: RESULT = (l instanceof String || r instanceof String) ? (l + " - " + r) : new Integer(((Integer)l).intValue() - ((Integer)r).intValue()); :}
                | num_expr:l TIMES num_expr:r
                    {: RESULT = (l instanceof String || r instanceof String) ? (l + " * " + r) : new Integer(((Integer)l).intValue() * ((Integer)r).intValue()); :}
                | num_expr:l DIVIDE num_expr:r
                    {: RESULT = (l instanceof String || r instanceof String) ? (l + " / " + r) : new Integer(((Integer)l).intValue() / ((Integer)r).intValue()); :}
                | num_expr:l MOD num_expr:r
                    {: RESULT = (l instanceof String || r instanceof String) ? (l + " % " + r) : new Integer(((Integer)l).intValue() % ((Integer)r).intValue()); :}
                | LPAREN num_expr:e RPAREN
                    {: RESULT=(e instanceof String) ? ("(" + e + ")") : e; :}
                | NUM_VAR:g
                    {: RESULT=g; :}
                | NUM_CONST:g
                    {: RESULT=g; :}
                ;
